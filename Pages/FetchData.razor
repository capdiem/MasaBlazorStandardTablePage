@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<MRow Class="pb-3">
    <MCol Cols="12" Sm="6">
        <MTextField @bind-Value="@summary"
                    OnKeyDown="HandleOnKeyDown"
                    Clearable
                    OnClearClick="OnSearch"
                    Label="Summary"
                    Dense
                    HideDetails="@("auto")"
                    Outlined>
        </MTextField>
    </MCol>
    <MCol Cols="12" Sm="6">
        <MSelect @bind-Value="warningSigns"
                 Items="@(Enum<WarningSigns>.GetEnumObjectList<WarningSigns>())"
                 ItemText="item => item.Name"
                 ItemValue="item => item.Value"
                 TValue="WarningSigns?"
                 TItem="EnumObject<WarningSigns>"
                 TItemValue="WarningSigns"
                 Label="高温警告"
                 OnSelectedItemUpdate="OnSearch"
                 Clearable
                 OnClearClick="OnSearch"
                 Dense
                 HideDetails="@("auto")"
                 Outlined>
        </MSelect>
    </MCol>
    <MCol Cols="12" Class="d-flex py-0 pb-3">
        <MSpacer></MSpacer>
        <MButton Class="mr-2" OnClick="OnReset">重置</MButton>
        <MButton Color="primary" OnClick="OnSearch">搜索</MButton>
    </MCol>
</MRow>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MDataTable Headers="_headers" Items="forecasts" ItemsPerPage="5" Class="elevation-1">
        <ItemColContent>
            @if (context.Header.Value == nameof(WeatherForecast.Date))
            {
                @context.Item.Date.ToShortDateString()
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
}

@code {

    private List<DataTableHeader<WeatherForecast>> _headers = new List<DataTableHeader<WeatherForecast>>
    {
        new() { Text = "Date", Value = nameof(WeatherForecast.Date) },
        new() { Text = "Temp. (C)", Value = nameof(WeatherForecast.TemperatureC) },
        new() { Text = "Temp. (F)", Value = nameof(WeatherForecast.TemperatureF) },
        new() { Text = "Summary", Value = nameof(WeatherForecast.Summary), Sortable = false }
    };

    private string summary;
    private WarningSigns? warningSigns;
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        forecasts = await ForecastService.GetForecastAsync();
    }

    private async Task HandleOnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await Task.Delay(156);
            await OnSearch();
        }
    }

    private Task OnReset()
    {
        summary = null;
        warningSigns = null;
        return OnSearch();
    }

    private async Task OnSearch()
    {
        forecasts = await ForecastService.GetForecastAsync(summary, warningSigns);
    }

}